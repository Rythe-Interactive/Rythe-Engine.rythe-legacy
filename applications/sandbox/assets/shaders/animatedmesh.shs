#version 450

generate(vertex, fragment)

#include <stdio.shinc>

shader(vertex)
{
    in uvec4 jointIndeces : SV_INDECES;
    in vec4 weights : SV_WEIGHTS;
    layout(std140, binding = 1) readonly buffer JointTransformsBuffer
    { 
        mat4 jointTransforms[];
    };

    void main(void)
    {
        vec4 totalLocalPos = vec4(0.0);
        vec4 totalNormal = vec4(0.0);

        for(int i = 0; i < 4; i++)
        {
            mat4 jointTransform = jointTransforms[jointIndeces[i]];

            vec4 posePosition = jointTransform * vec4(stdin(position), 1.0);
            totalLocalPos += posePosition * weights[i];

            vec4 worldNormal = jointTransform * vec4(stdin(normal), 1.0);
            totalNormal += worldNormal * weights[i];
        }
 

        PropagateStdIO(totalLocalPos.xyz, totalNormal.xyz);
        gl_Position = WorldToScreenSpacePosition(totalLocalPos.xyz);
        lgn_stdio.vertexcolor = vec4(jointIndeces.x,0.0,0.0,1.0);
    }
}

shader(fragment)
{
    uniform vec4 color = vec4(1.0);
    void main(void)
    {
        SubmitOutput(vec4(stdin(vertexcolor.rrr)/vec3(18),1.0));
    }
}
