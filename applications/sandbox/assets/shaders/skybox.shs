#version 450
#state DEPTH OFF
#state CULL OFF

generate(vertex, fragment)

#include <stdio.shinc>
#include <color_correction.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ProjectionMatrix * ViewMatrix * vec4(GetCamera().position + position, 1.0);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform sampler2D skybox;
    
    void main(void)
    {
        //vec3 unitDir = normalize(stdio(position));

        //vec4 color = texture(_texture, stdio(uv));
        fragment_color = texture(skybox, stdio(uv));
        //fragment_color = vec4(mix(vec3(average(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.0, 1.0, 0.0)) + 0.9)), 1.0);
        //fragment_depth = 1;
        //fragment_normal = vec4(0.0);
        //fragment_position = vec4(unitDir * FarZ, 1.0);
        fragment_overdraw = vec4(0.0);
    }
}
