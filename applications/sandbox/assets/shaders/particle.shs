#version 450
#state CULL ON
#state DEPTH_WRITE ON

generate(vertex, fragment)

#include <stdio.shinc>
#include <utils.shinc>
#include <math_ext.shinc>

shader(vertex)
{
    uniform bool fixedSize;

    void main(void)
    {
        if(fixedSize)
        {
            gl_Position = FixedSizeBillboardModelToScreenSpacePosition(position);
        }
        else
        {
            gl_Position = BillboardModelToScreenSpacePosition(position);
        }

        PropagateStdIO((inverse(ViewProjectionMatrix) * gl_Position).xyz, (BillboardModelMatrix() * vec4(-stdin(normal), 0.0)).xyz);
    }
}

shader(fragment)
{
    uniform float particleRadius;
    uniform vec4 particleColor;
    void main(void)
    {
        vec4 color = vec4(particleColor.rgb, clamp01(1.0 - (length(stdio(uv) - vec2(0.5))*3.0)));
        color.a *= SoftParticleAlpha(2.0);
        if(color.a == 0.0)
            discard;

        fragment_color = color;
        fragment_normal = vec4(vec3(0.0), 1.0);
        fragment_position = vec4(vec3(0.0), 1.0);
        fragment_overdraw = vec4(vec3(0.0), 1.0);
    }
}
