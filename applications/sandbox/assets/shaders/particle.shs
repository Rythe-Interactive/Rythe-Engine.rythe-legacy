#version 450
#state DEPTH_WRITE OFF
#state BLEND TRANSPARENT

generate(vertex, fragment)

#include <stdio.shinc>
#include <utils.shinc>
#include <math_ext.shinc>

variant(depth_only)
{
    #define DEPTH_ONLY
    #state DEPTH_WRITE ON
}

shader(vertex)
{
    uniform bool isBillboard;
    uniform bool fixedSize;

    void main(void)
    {
        if(isBillboard)
        {
            if(fixedSize)
            {
                gl_Position = FixedSizeBillboardModelToScreenSpacePosition(position);
            }
            else
            {
                gl_Position = BillboardModelToScreenSpacePosition(position);
            }
            PropagateStdIO((inverse(ViewProjectionMatrix) * gl_Position).xyz, (BillboardModelMatrix() * vec4(-stdin(normal), 0.0)).xyz);
        }
        else
        {
            PropagateStdIO();
        }
    }
}

shader(fragment)
{
    uniform bool isAnimated;
    uniform sampler2DArray _textureArray;
    uniform int frameCount;
    uniform bool blend;
 
    uniform bool useSolidColor;
    uniform vec4 _color;

    uniform bool useTexture;
    uniform sampler2D _texture;

    uniform bool isSoftParticle;

    void main(void)
    {
        #if defined(DEPTH_ONLY)
            fragment_color = vec4(0.0);
        #else 
            vec4 color = vec4(1.0);
            if(isAnimated)
            {
                float frame = stdio(frameID); 
                vec4 current = texture(_textureArray, vec3(stdio(uv), frame ));
                if(blend)
                {
                    vec4 previous = texture(_textureArray, vec3(stdio(uv), frame-1.0));
                    color = pow(mix(current, previous, round(1+frame)-frame), vec4(vec3(2.2),1.0));
                }
                else
                {
                    color = current;
                }
            }
            else if(useSolidColor)
            {
                color = _color;
            }
            else if(useTexture)
            {
                color = texture(_texture, stdio(uv));
            }

            if(isSoftParticle)
            {
                color.a *= SoftParticleAlpha(2.0);
                if(color.a <= epsilon)
                    discard;
            }

            fragment_color = color;
            fragment_normal = vec4(vec3(0.0), 1.0);
            fragment_position = vec4(vec3(0.0), 1.0);
            fragment_overdraw = vec4(vec3(0.0), 1.0);
        #endif
    }
}


