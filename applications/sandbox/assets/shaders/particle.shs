#version 450
#state DEPTH_WRITE OFF
#state BLEND TRANSPARENT

generate(vertex, fragment)

#include <stdio.shinc>
#include <utils.shinc>
#include <math_ext.shinc>

variant(depth_only)
{
    #define DEPTH_ONLY
    #state DEPTH_WRITE ON
}

shader(vertex)
{
    uniform bool fixedSize;

    void main(void)
    {
        if(fixedSize)
        {
            gl_Position = FixedSizeBillboardModelToScreenSpacePosition(position);
        }
        else
        {
            gl_Position = BillboardModelToScreenSpacePosition(position);
        }
        PropagateStdIO((inverse(ViewProjectionMatrix) * gl_Position).xyz, (BillboardModelMatrix() * vec4(-stdin(normal), 0.0)).xyz);
    }
}

shader(fragment)
{
    uniform sampler2DArray _texture;
    uniform int frameCount;
    void main(void)
    {
        #if defined(DEPTH_ONLY)
            fragment_color = vec4(0.0);
        #else 
            float frame = stdio(frameID); 
            vec4 current = texture(_texture, vec3(stdio(uv), frame ));
            vec4 previous = texture(_texture, vec3(stdio(uv), frame-1.0));
            vec4 color = pow(mix(current, previous,round(1+frame)-frame), vec4(vec3(2.2),1.0));

            color.a *= SoftParticleAlpha(2.0);
            if(color.a <= epsilon)
                discard;
            color.a *= 1.0 - (frame/frameCount);
            
            fragment_color = color;
            fragment_normal = vec4(vec3(0.0), 1.0);
            fragment_position = vec4(vec3(0.0), 1.0);
            fragment_overdraw = vec4(vec3(0.0), 1.0);
        #endif
    }
}


