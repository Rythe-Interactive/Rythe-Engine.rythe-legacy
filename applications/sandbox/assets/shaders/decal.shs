#version 450
#state DEPTH OFF
#state CULL FRONT

generate(vertex, fragment)

#include<stdio.shinc>
#include<math_ext.shinc>
#include <lighting.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform sampler2D skybox;

    vec3 FakeIBL(Camera camera, Material material)
    {
        vec3 viewDir = normalize(camera.toView);
        vec3 lightDirection = reflect(-viewDir, material.normal);

        vec3 halfwayVector = normalize(lightDirection + viewDir);

        float halfwayDotView = dot01(halfwayVector, viewDir);
        float normalDotHalfway = dot01(material.normal, halfwayVector);
        float normalDotView = dot01(material.normal, viewDir);
        float normalDotLight = dot01(material.normal, lightDirection);

        float roughness = pow(material.roughness, 0.5);
        float metallic = pow(material.metallic, 0.5);

        // cook-torrance brdf
        vec3 fresnelReflection = fresnelSchlick(mix(halfwayDotView, 1.0, roughness), material.F0);
        float normalDistribution = DistributionGGX(normalDotHalfway, roughness);
        float geometryShadowing = GeometrySmith(normalDotView, normalDotLight, roughness);
        vec3 specular = CookTorranceBRDF(normalDistribution, fresnelReflection, geometryShadowing, normalDotLight, normalDotView);

        vec3 diffuse = LambertianDiffuse(specular, material.albedo.rgb, metallic);

        vec2 horDir = normalize(vec2(lightDirection.x ,lightDirection.z));
        vec2 uv = vec2(1-(atan(horDir.y,horDir.x)/(2.0*pi)),1-(acos(dot(vec3(0.0,1.0,0.0),lightDirection))/pi));
        vec3 specularRadiance = pow(textureLod(skybox, uv, textureQueryLevels(skybox) * roughness).rgb, vec3(2.2));

        vec3 diffuseDirection = material.normal;
        horDir = normalize(vec2(diffuseDirection.x, diffuseDirection.z));
        uv = vec2(1.0 - (atan(horDir.y, horDir.x) / (2.0 * pi)), 1.0 - (acos(dot(vec3(0.0, 1.0, 0.0), diffuseDirection)) / pi));
        vec3 diffuseRadiance = pow(textureLod(skybox, uv, textureQueryLevels(skybox)).rgb, vec3(2.2));

        return max(diffuse + (specular * specularRadiance), vec3(0));
    }

    void main(void)
    {
        // Get the world position from the gbuffer.
        vec3 worldScenePos = ScenePosition();

        // If the worldspace was 0 there's either nothing (skybox) or something that doesn't want to me messed with.
        if(worldScenePos == vec3(0.0))
            discard;

        // Transform to local space.
        vec3 localScenePos = (inverse(stdin(modelMatrix)) * vec4(worldScenePos.xyz, 1.0)).xyz;

        // If the read position is outside of this projection shape then it's not part of the decal.
        if(max(abs(localScenePos.x), max(abs(localScenePos.y), abs(localScenePos.z))) > 0.5)
            discard;

        // Get camera for lighting.
        Camera camera = GetCamera();

        // Get the world normal from the gbuffer
        vec3 worldNormal = SceneNormal();

        // If the worldNormal is 0 then something doesn't like to be messed with.
        if(worldNormal == vec3(0.0))
            discard;

        // Calculate world tangent.
        vec3 worldTangent = (stdin(modelMatrix) * vec4(1, 0, 0, 1)).xyz;
        worldTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);

        // Get material parameters from uv, camera, world normal and world tangent.
        Material material = ExtractMaterial(localScenePos.xz + vec2(0.5), camera, worldNormal, worldTangent);

        // Get all lighting for this fragment.
        vec3 lighting = GetAllLighting(material, camera, worldScenePos);

        // Do skybox lighting hack.
        lighting += FakeIBL(camera, material);

        // Submit output values to gbuffers.
        SubmitOutput(vec4(lighting, material.albedo.a), worldNormal, worldScenePos, material.emissive);
    }
}
