#version 450
#state DEPTH OFF
#state CULL FRONT

generate(vertex, fragment)

variant(depth only)
{
    #define DEPTH_ONLY
    #state BLEND TRANSPARENT
}


#include<stdio.shinc>
#include<math_ext.shinc>
#include <lighting.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform sampler2D skybox;

    void main(void)
    {
        // Get the world position from the gbuffer.
        vec3 worldScenePos = ScenePosition();

        // If the worldspace was 0 there's either nothing (skybox) or something that doesn't want to me messed with.
        if(worldScenePos == vec3(0.0))
            discard;

        // Transform to local space.
        vec3 localScenePos = (inverse(stdin(modelMatrix)) * vec4(worldScenePos.xyz, 1.0)).xyz;

        // If the read position is outside of this projection shape then it's not part of the decal.
        if(max(abs(localScenePos.x), max(abs(localScenePos.y), abs(localScenePos.z))) > 0.5)
            discard;

        // Get the world normal from the gbuffer
        vec3 worldNormal = SceneNormal();

        // If the worldNormal is 0 then something doesn't like to be messed with.
        if(worldNormal == vec3(0.0))
            discard;

#if defined(DEPTH_ONLY)
        fragment_color = vec4(0.0);
#else
        // Get camera for lighting.
        Camera camera = GetCamera();

        // Calculate world tangent.
        vec3 worldTangent = (stdin(modelMatrix) * vec4(1, 0, 0, 1)).xyz;
        worldTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);

        // Get material parameters from uv, camera, world normal and world tangent.
        Material material = ExtractMaterial(localScenePos.xz + vec2(0.5), camera, worldNormal, worldTangent);

        // Get all lighting for this fragment.
        vec3 lighting = GetAllLighting(material, camera, worldScenePos);

        // Do skybox lighting hack.
        lighting += FakeIBL(camera, material);

        // Submit output values to gbuffers.
        SubmitOutput(vec4(lighting, material.albedo.a), worldNormal, worldScenePos, material.emissive);
#endif
    }
}
