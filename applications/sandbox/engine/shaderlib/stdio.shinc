/////////////////////
//  Default Input  //
/////////////////////

// Notify other headers that this header exists.
#if !defined(STDIO_INCL)
#define STDIO_INCL
#endif

// Default vertex attribute input.
#if defined(VERTEX_SHADER)
in vec3 position : SV_POSITION;
in vec3 normal : SV_NORMAL;
in vec3 tangent : SV_TANGENT;
in vec4 vertexcolor : SV_COLOR;
in vec2 uv : SV_TEXCOORD0;
in uint64_t entityId : SV_ENTITYID;
in float frameID : SV_FRAMEID;
in mat4 modelMatrix : SV_MODELMATRIX;
#endif

// Define standard io keyword so that we can auto detect whether it should be input or output.
#if defined(VERTEX_SHADER)
#define io out
#elif defined(FRAGMENT_SHADER)
#define io in
#endif

// Magic communication blocks between shaders,
// they all have the same layout but other decoration depending on the shader type.
#if defined(GEOMETRY_SHADER)
in LGN_STDVTXGEOM
#elif defined(GEOMETRY_SHADER_ACTIVE)
#if defined(VERTEX_SHADER)
out LGN_STDVTXGEOM
#elif defined(FRAGMENT_SHADER)
in LGN_STDGEOMFRAG
#endif
#else
io LGN_STDIO
#endif
{
    vec3 position;
    vec3 wvertex;
    vec4 vertexcolor;
    vec3 normal;
    vec3 wnormal;
    vec3 tangent;
    vec3 wtangent;
    vec2 uv;
    flat uint64_t entityId;
    float frameID;
    mat4 modelMatrix;
}
#if defined(GEOMETRY_SHADER)
lgn_stdin[LGN_geom_vtxc];
#else
lgn_stdio;
#endif

// Geometry shaders have both input and output and thus need an extra communication block.
#if defined(GEOMETRY_SHADER)
out LGN_STDGEOMFRAG
{
    vec3 position;
    vec3 wvertex;
    vec4 vertexcolor;
    vec3 normal;
    vec3 wnormal;
    vec3 tangent;
    vec3 wtangent;
    vec2 uv;
    flat uint64_t entityId;
    float frameID;
    mat4 modelMatrix;
} lgn_stdout;
#endif

// stdio definition makes working with io blocks easier.
#if defined(VERTEX_SHADER)
#define stdio(param) param
#define stdin(param) param
#define stdout(param) lgn_stdio.param
#elif defined(FRAGMENT_SHADER)
#define stdio(param) lgn_stdio.param
#define stdin(param) lgn_stdio.param
#elif defined(GEOMETRY_SHADER)
#define stdin(index, param) lgn_stdin[index].param
#define stdout(param) lgn_stdout.param
#endif

// Camera utility structure for easier use,
// can be acquired through the GetCamera function.
struct Camera
{
    mat4 viewMatrix;
    mat4 projectionMatrix;
    vec3 position;
    float farz;
    vec3 viewDirection;
    float nearz;
    #if defined(GEOMETRY_SHADER)
    vec3 toView[LGN_geom_vtxc];
    #else
    vec3 toView;
    #endif
};

// Raw IO optimized struct for CPU/GPU communication.
struct CameraInput
{
    mat4 view;
    mat4 proj;
    vec4 posnearz;
    vec4 vdirfarz;
    ivec2 viewportSize;
};

// Camera uniform.
uniform CameraInput lgn_cmr_in : SV_CAMERA;

// GBuffer scene data
uniform sampler2D lgn_sceneColor : SV_SCENECOLOR;
uniform sampler2D lgn_sceneDepth : SV_SCENEDEPTH;
uniform sampler2D lgn_sceneNormal : SV_SCENENORMAL;
uniform sampler2D lgn_scenePosition : SV_SCENEPOSITION;
uniform sampler2D lgn_hdrOverdraw : SV_HDROVERDRAW;

// Util defines
#define ViewMatrix lgn_cmr_in.view
#define ProjectionMatrix lgn_cmr_in.proj
#define ViewProjectionMatrix (lgn_cmr_in.proj * lgn_cmr_in.view)
#define NearZ lgn_cmr_in.posnearz.w
#define FarZ lgn_cmr_in.vdirfarz.w

vec4 WorldToScreenSpacePosition(vec3 pos)
{
    return (ViewProjectionMatrix * vec4(pos, 1.f));
}

vec4 WorldToScreenSpacePosition(vec4 pos)
{
    return (ViewProjectionMatrix * pos);
}

// Extract camera from input struct.
Camera GetCamera()
{
    Camera camera;
    camera.viewMatrix = lgn_cmr_in.view;
    camera.projectionMatrix = lgn_cmr_in.proj;
    camera.position = lgn_cmr_in.posnearz.xyz;
    camera.nearz = lgn_cmr_in.posnearz.w;
    camera.viewDirection = lgn_cmr_in.vdirfarz.xyz;
    camera.farz = lgn_cmr_in.vdirfarz.w;
    #if defined(VERTEX_SHADER)
    camera.toView = camera.position - (modelMatrix * vec4(position, 1.0)).xyz;
    #elif defined(FRAGMENT_SHADER)
    camera.toView = camera.position - lgn_stdio.wvertex;
    #elif defined(GEOMETRY_SHADER)
    for(int i = 0; i < LGN_geom_vtxc; i++)
        camera.toView[i] = camera.position - lgn_stdin[i].wvertex;
    #endif
    return camera;
}

float FrustumDepth()
{
    return lgn_cmr_in.vdirfarz.w - lgn_cmr_in.posnearz.w;
}

vec4 ModelToScreenSpacePosition(vec3 pos)
{
    #if defined(GEOMETRY_SHADER)
    return (ViewProjectionMatrix * stdin(0, modelMatrix)) * vec4(pos, 1.f);
    #else
    return (ViewProjectionMatrix * stdio(modelMatrix)) * vec4(pos, 1.f);
    #endif
}

vec4 SceneColor(vec2 uv)
{
    return texture(lgn_sceneColor, uv);
}

vec3 SceneDepth(vec2 uv)
{
    return texture(lgn_sceneDepth, uv).rgb;
}

vec3 SceneNormal(vec2 uv)
{
    return texture(lgn_sceneNormal, uv).rgb;
}

vec3 ScenePosition(vec2 uv)
{
    return texture(lgn_scenePosition, uv).rgb;
}

vec4 HDROverdraw(vec2 uv)
{
    return texture(lgn_hdrOverdraw,uv);
}

float LinearDepth(float depth)
{
    return (lgn_cmr_in.posnearz.w * lgn_cmr_in.vdirfarz.w) / (lgn_cmr_in.vdirfarz.w + depth * (lgn_cmr_in.posnearz.w - lgn_cmr_in.vdirfarz.w));
}

#if defined(FRAGMENT_SHADER)
#if !defined(NO_DEPTH_OUT)
out float gl_FragDepth;

#define fragment_depth gl_FragDepth
#endif

#if !defined(NO_DEFAULT_OUT)
out vec4 fragment_color : SV_FRAGMENTOUT;
out vec4 fragment_normal : SV_NORMALOUT;
out vec4 fragment_position : SV_POSITIONOUT;
out vec4 fragment_overdraw : SV_HDROVERDRAWOUT;

void SubmitOutput(vec4 color)
{
    fragment_color = color;
    fragment_normal = vec4(stdin(wnormal), 1.0);
    fragment_position = vec4(stdin(wvertex), 1.0);
    fragment_overdraw = vec4(vec3(0.0), 1.0);
}

void SubmitOutput(vec4 color, vec3 normal, vec3 position)
{
    fragment_color = color;
    fragment_normal = vec4(normal, 1.0);
    fragment_position = vec4(position, 1.0);
    fragment_overdraw = vec4(vec3(0.0), 1.0);
    #if !defined(NO_DEPTH_OUT)
    vec4 screenpos = WorldToScreenSpacePosition(position);
    fragment_depth = screenpos.z / screenpos.w;
    #endif
}

void SubmitOutput(vec4 color, vec3 normal, vec3 position, vec3 emissive)
{
    fragment_color = color;
    fragment_normal = vec4(normal, 1.0);
    fragment_position = vec4(position, 1.0);
    fragment_overdraw = vec4(emissive, 1.0);
    #if !defined(NO_DEPTH_OUT)
    vec4 screenpos = WorldToScreenSpacePosition(position);
    fragment_depth = screenpos.z / screenpos.w;
    #endif
}
#endif

in vec4 gl_FragCoord;

ivec2 ScreenResolution()
{
    return lgn_cmr_in.viewportSize;
}

vec2 ScreenUV()
{
    return gl_FragCoord.xy / lgn_cmr_in.viewportSize;
}

vec4 SceneColor()
{
    return texture(lgn_sceneColor, gl_FragCoord.xy / lgn_cmr_in.viewportSize);
}

vec3 SceneDepth()
{
    return texture(lgn_sceneDepth, gl_FragCoord.xy / lgn_cmr_in.viewportSize).rgb;
}

vec3 SceneNormal()
{
    return texture(lgn_sceneNormal, gl_FragCoord.xy / lgn_cmr_in.viewportSize).rgb;
}

vec3 ScenePosition()
{
    return texture(lgn_scenePosition, gl_FragCoord.xy / lgn_cmr_in.viewportSize).rgb;
}

vec4 HDROverdraw()
{
    return texture(lgn_hdrOverdraw, gl_FragCoord.xy / lgn_cmr_in.viewportSize);
}

float LinearDepth()
{
	return lgn_cmr_in.posnearz.w * lgn_cmr_in.vdirfarz.w / (lgn_cmr_in.vdirfarz.w - gl_FragCoord.z * (lgn_cmr_in.posnearz.w - lgn_cmr_in.vdirfarz.w));
}

bool DepthCull(float depth)
{
    #if defined(DEPTH_ONLY)
    return true;
    #else
    //return LinearDepth() <= LinearDepth(depth) + 0.0001;
    return false;
    #endif
}

vec3 GetViewRay(vec3 worldPosition)
{
    vec4 viewSpacePos = ViewMatrix * vec4(worldPosition, 1.0);
    return viewSpacePos.xyz / viewSpacePos.z;
}

vec3 ViewPositionFromDepth(float depth)
{
    vec4 clipSpacePos = vec4((ScreenUV() * vec2(2.0)) - vec2(1.0), depth, 1.0);
    vec4 viewSpacePos = inverse(ProjectionMatrix) * clipSpacePos;
    return viewSpacePos.xyz / viewSpacePos.w;
}

vec3 WorldPositionFromDepth(float depth, vec3 direction)
{
    vec4 clipSpacePos = vec4(vec2(0.0), depth, 1.0);
    vec4 viewSpacePos = inverse(ProjectionMatrix) * clipSpacePos;

    float eyeDepth = viewSpacePos.z / viewSpacePos.w;
    vec3 viewSpaceResultPos = direction * eyeDepth;
    return (inverse(ViewMatrix) * vec4(viewSpaceResultPos, 1.0)).xyz;
}

vec3 ViewToWorldSpacePostion(vec3 viewSpacePos)
{
    return (inverse(ViewMatrix) * vec4(viewSpacePos, 1.0)).xyz;
}

vec3 WorldToViewSpacePostion(vec3 worldSpacePos)
{
    return (ViewMatrix * vec4(worldSpacePos, 1.0)).xyz;
}
#endif

#if defined(GEOMETRY_SHADER)  // Geometry shader
vec3 GetWorldPosition(int index)
{
    return normalize(stdin(index, wvertex));
}

vec3 GetWorldNormal(int index)
{
    return normalize(stdin(index, wnormal));
}

vec3 GetWorldTangent(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
    return normalize(stdin(index, wtangent) - dot(stdin(index, wtangent), worldNormal) * worldNormal);
}

vec3 GetWorldTangent(int index, vec3 worldNormal)
{
    return normalize(stdin(index, wtangent) - dot(stdin(index, wtangent), worldNormal) * worldNormal);
}

vec3 GetWorldBitangent(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(int index, vec3 worldNormal)
{
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal, vec3 worldTangent)
{
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldDirection(vec3 dir)
{
    return normalize((stdin(0, modelMatrix) * vec4(dir, 0.0)).xyz);
}

vec3 GetWorldPoint(vec3 p)
{
    return (stdin(0, modelMatrix) * vec4(p, 1.0)).xyz;
}

mat3 GetTBNMatrix(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, worldTangent);
	return transpose(mat3(worldTangent, worldBitangent, worldNormal));
}

mat3 GetTBNMatrix(vec3 worldNormal, vec3 worldTangent)
{
    vec3 orthogonalizedTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, orthogonalizedTangent);
	return transpose(mat3(orthogonalizedTangent, worldBitangent, worldNormal));
}

#else // Not geometry shader
vec3 GetWorldPosition()
{
#if defined(FRAGMENT_SHADER)
    return lgn_stdio.wvertex;
#elif defined(VERTEX_SHADER)
    return (stdio(modelMatrix) * vec4(stdio(position), 1.0)).xyz;
#endif
}

vec3 GetWorldNormal()
{
#if defined(FRAGMENT_SHADER)
    return normalize(lgn_stdio.wnormal);
#elif defined(VERTEX_SHADER)
    return normalize((stdio(modelMatrix) * vec4(stdio(normal), 0.0)).xyz);
#endif
}

vec3 GetWorldTangent()
{
    vec3 worldNormal = GetWorldNormal();
#if defined(FRAGMENT_SHADER)
    return normalize(lgn_stdio.wtangent - dot(lgn_stdio.wtangent, worldNormal) *worldNormal);
#elif defined(VERTEX_SHADER)
    vec3 worldTangent = normalize((stdio(modelMatrix) * vec4(tangent, 0.0)).xyz);
    return normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
#endif
}

vec3 GetWorldTangent(vec3 worldNormal)
{
#if defined(FRAGMENT_SHADER)
    return normalize(lgn_stdio.wtangent - dot(lgn_stdio.wtangent, worldNormal) *worldNormal);
#elif defined(VERTEX_SHADER)
    vec3 worldTangent = normalize((stdio(modelMatrix) * vec4(tangent, 0.0)).xyz);
    return normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
#endif
}

vec3 GetWorldBitangent()
{
    vec3 worldNormal = GetWorldNormal();
	vec3 worldTangent = GetWorldTangent(worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal)
{
	vec3 worldTangent = GetWorldTangent(worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal, vec3 worldTangent)
{
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldDirection(vec3 dir)
{
    return normalize((stdio(modelMatrix) * vec4(dir, 0.0)).xyz);
}

vec3 GetWorldPoint(vec3 p)
{
    return (stdio(modelMatrix) * vec4(p, 1.0)).xyz;
}

mat3 GetTBNMatrix()
{
    vec3 worldNormal = GetWorldNormal();
	vec3 worldTangent = GetWorldTangent(worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, worldTangent);
	return transpose(mat3(worldTangent, worldBitangent, worldNormal));
}

mat3 GetTBNMatrix(vec3 worldNormal, vec3 worldTangent)
{
    vec3 orthogonalizedTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, orthogonalizedTangent);
	return transpose(mat3(orthogonalizedTangent, worldBitangent, worldNormal));
}
#endif // End not geometry shader

#if defined(VERTEX_SHADER)
void PropagateStdIO()
{
    lgn_stdio.position = position;
    lgn_stdio.wvertex = GetWorldPosition();
    lgn_stdio.vertexcolor = vertexcolor;
    lgn_stdio.normal = normal;
    lgn_stdio.wnormal = GetWorldNormal();
    lgn_stdio.tangent = tangent;
    lgn_stdio.wtangent = GetWorldTangent(lgn_stdio.wnormal);
    lgn_stdio.uv = uv;
    lgn_stdio.entityId = entityId;
    lgn_stdio.frameID = frameID;
    lgn_stdio.modelMatrix = modelMatrix;
}

void PropagateStdIO(vec3 worldPosition, vec3 worldNormal)
{
    lgn_stdio.position = position;
    lgn_stdio.wvertex = worldPosition;
    lgn_stdio.vertexcolor = vertexcolor;
    lgn_stdio.normal = normal;
    lgn_stdio.wnormal = worldNormal;
    lgn_stdio.tangent = tangent;
    lgn_stdio.wtangent = GetWorldTangent(lgn_stdio.wnormal);
    lgn_stdio.uv = uv;
    lgn_stdio.entityId = entityId;
    lgn_stdio.frameID = frameID;
    lgn_stdio.modelMatrix = modelMatrix;
}
#elif defined(GEOMETRY_SHADER)
void PropagateStdIO(int index)
{
    stdout(position) = stdin(index, position);
    stdout(wvertex) = stdin(index, wvertex);
    stdout(vertexcolor) = stdin(index, vertexcolor);
    stdout(normal) = stdin(index, normal);
    stdout(wnormal) = stdin(index, wnormal);
    stdout(tangent) = stdin(index, tangent);
    stdout(wnormal) = stdin(index, wnormal);
    stdout(uv) = stdin(index, uv);
    stdout(entityId) = stdin(index, entityId);
    stdout(frameID) = stdin(index, frameID);
    stdout(modelMatrix) = stdin(index, modelMatrix);
}
#endif
