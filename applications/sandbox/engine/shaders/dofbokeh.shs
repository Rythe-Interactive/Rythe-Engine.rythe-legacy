#version 450
#state CULL OFF
#state DEPTH OFF
#state ALPHA OFF

generate(vertex, fragment)

#include <stdio.shinc>
#include <math_ext.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position =  vec4(stdin(position), 1.0);
        PropagateStdIO();
    }
}


shader(fragment)
{
    uniform vec2 scale;
    uniform float bokehRadius;

    float Weigh (float coc, float radius)
    {
        return clamp01((coc - radius + 2) / 2);
    }

    void main(void)
    {
        //Precreated kernel of offsets.
        const int kernelSampleCount = 22;
        const vec2 kernel[kernelSampleCount] = {
            vec2(0, 0),
            vec2(0.53333336, 0),
            vec2(0.3325279, 0.4169768),
            vec2(-0.11867785, 0.5199616),
            vec2(-0.48051673, 0.2314047),
            vec2(-0.48051673, -0.23140468),
            vec2(-0.11867763, -0.51996166),
            vec2(0.33252785, -0.4169769),
            vec2(1, 0),
            vec2(0.90096885, 0.43388376),
            vec2(0.6234898, 0.7818315),
            vec2(0.22252098, 0.9749279),
            vec2(-0.22252095, 0.9749279),
            vec2(-0.62349, 0.7818314),
            vec2(-0.90096885, 0.43388382),
            vec2(-1, 0),
            vec2(-0.90096885, -0.43388376),
            vec2(-0.6234896, -0.7818316),
            vec2(-0.22252055, -0.974928),
            vec2(0.2225215, -0.9749278),
            vec2(0.6234897, -0.7818316),
            vec2(0.90096885, -0.43388376),
        };
        //Get the texel size.
        const vec2 texelSize = 1.0 / textureSize(lgn_sceneColor, 0);

        //Get the texture coordinates
        const vec2 texCoords = stdin(uv)*scale;

        //Sample the alpha value of the area of focus texture.
        float aof = SceneColor(texCoords).a;

        vec3 bgColor = vec3(0.0);
        vec3 fgColor = vec3(0.0);
        float bgWeight = 0;
        float fgWeight = 0;
        //Looping over each kernel offset.
        for(int k = 0; k < kernelSampleCount; k++)
        {
            //Adjusting it to the assigned size of the bokeh blur.
            vec2 o = kernel[k] * bokehRadius;
            float radius = length(o);
            o *= texelSize;
            vec4 s = SceneColor(texCoords+o);
            //Figuring out how much the background and foreground weigh.
            float bgw = Weigh(max(0,min(s.a,aof)), radius);
            bgColor += s.rgb * bgw;
            bgWeight += bgw;

            float fgw = Weigh(-s.a, radius);
            fgColor += s.rgb * fgw;
            fgWeight += fgw;
        }
        bgColor *= 1.0/(bgWeight + int(bgWeight == 0));
        fgColor *= 1.0/(fgWeight + int(fgWeight == 0));
        //Now using that weight of it desides which one shows more, the background or foreground.
        float bgfg = clamp01(min(1, fgWeight * 3.14159265359 / kernelSampleCount));
        vec3 color = mix(bgColor,fgColor, bgfg);
        
        fragment_color = vec4(color, bgfg);
    }
}

